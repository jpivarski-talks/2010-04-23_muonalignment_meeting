ssh username@lxplus5.cern.ch
cd /tmp/username
scramv1 project CMSSW CMSSW_3_6_0
cd CMSSW_3_6_0/src
cmsenv

cat > check_alignment_cfg.py
from Alignment.MuonAlignment.convertSQLitetoXML_cfg import *

process.source.firstRun = cms.untracked.uint32(125541)  # get the right IOV

### Option 1: get the geometry from an SQLite file (with GlobalPositionRcd from database)
# process.PoolDBESSource.connect = "sqlite_file:fileName.db"
# process.inertGlobalPositionRcd.connect = "frontier://FrontierProd/CMS_COND_31X_ALIGNMENT"
# process.inertGlobalPositionRcd.toGet = cms.VPSet(cms.PSet(record = cms.string("GlobalPositionRcd"), tag = cms.string("GlobalAlignment_v1_offline")))

### Option 2: get the geometry from the explicit database records (including GlobalPositionRcd)
process.PoolDBESSource.connect = "frontier://FrontierProd/CMS_COND_31X_ALIGNMENT"
process.PoolDBESSource.toGet = cms.VPSet(
    cms.PSet(record = cms.string("DTAlignmentRcd"), tag = cms.string("DTAlignment_2009_v2_offline")),
    cms.PSet(record = cms.string("DTAlignmentErrorRcd"), tag = cms.string("DTAlignmentError_2009_v2_offline")),
    cms.PSet(record = cms.string("CSCAlignmentRcd"), tag = cms.string("CSCAlignment_2009_v2_offline")),
    cms.PSet(record = cms.string("CSCAlignmentErrorRcd"), tag = cms.string("CSCAlignmentError_2009_v2_offline")))
process.inertGlobalPositionRcd.connect = "frontier://FrontierProd/CMS_COND_31X_ALIGNMENT"
process.inertGlobalPositionRcd.toGet = cms.VPSet(cms.PSet(record = cms.string("GlobalPositionRcd"), tag = cms.string("GlobalAlignment_v1_offline")))

### Option 3: get the geometry from a signed-off globalTag (with GlobalPositionRcd implicitly from the same globalTag)
# del process.PoolDBESSource
# del process.inertGlobalPositionRcd
# process.load("Configuration/StandardSequences/FrontierConditions_GlobalTag_cff")
# process.GlobalTag.globaltag = "GR_R_36X_V4::All"

process.MuonGeometryDBConverter.outputXML.fileName = "from_2009_v2_offline.xml"
process.MuonGeometryDBConverter.outputXML.relativeto = "ideal"  # "ideal" is local coordinates, relative to ideal; "none" is global, absolute coordinates
^D (EOF)
cmsRun check_alignment_cfg.py

# Now you can read the constants out of the XML file.
# However, if you want to make it easier to read (or to modify the way the output looks), run a script like this:
cat > check_me13.py
from Alignment.MuonAlignment.geometryXMLparser import MuonGeometry

geometry = MuonGeometry("from_2009_v2_offline.xml")

for endcap, station, ring in [(1, 1, 3), (2, 1, 3)]:   # ME+1/3 and ME-1/3
    for chamber in range(1, 36+1):

        # local coordinates relative to ideal because relativeto="ideal"
        x = geometry.csc[endcap, station, ring, chamber].x * 10.
        y = geometry.csc[endcap, station, ring, chamber].y * 10.
        z = geometry.csc[endcap, station, ring, chamber].z * 10.
        phix = geometry.csc[endcap, station, ring, chamber].phix * 1000.
        phiy = geometry.csc[endcap, station, ring, chamber].phiy * 1000.
        phiz = geometry.csc[endcap, station, ring, chamber].phiz * 1000.
        print "Chamber ME%s%d/%d/%d: %g %g %g mm, %g %g %g mrad" % (("+" if endcap == 1 else "-"), station, ring, chamber, x, y, z, phix, phiy, phiz)

        for layer in range(1, 6+1):
            x = geometry.csc[endcap, station, ring, chamber, layer].x * 10.
            y = geometry.csc[endcap, station, ring, chamber, layer].y * 10.
            z = geometry.csc[endcap, station, ring, chamber, layer].z * 10.
            phix = geometry.csc[endcap, station, ring, chamber, layer].phix * 1000.
            phiy = geometry.csc[endcap, station, ring, chamber, layer].phiy * 1000.
            phiz = geometry.csc[endcap, station, ring, chamber, layer].phiz * 1000.
            print "      Layer ME%s%d/%d/%d/%d: %g %g %g mm, %g %g %g mrad" % (("+" if endcap == 1 else "-"), station, ring, chamber, layer, x, y, z, phix, phiy, phiz)
        print

    print "==============================================="
    print
^D (EOF)
python check_me13.py | less
